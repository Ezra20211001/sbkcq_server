/*******************************************************************************

Copyright 2010 by tiankong Interactive Game Co., Ltd.
All rights reserved.

This software is the confidential and proprietary information of
tiankong Interactive Game Co., Ltd. ('Confidential Information'). You shall
not disclose such Confidential Information and shall use it only in
accordance with the terms of the license agreement you entered into with
tiankong Interactive  Co., Ltd.

*******************************************************************************/

/**
*	@file		role_att_protocol.h
*	@author		lc
*	@date		2011/03/10	initial
*	@version	0.0.1.0
*	@brief		人物属性消息
*/


#ifndef ROLE_ATT_PROTOCOL
#define ROLE_ATT_PROTOCOL

#include "protocol_common_errorcode.h"
#include "RoleDefine.h"
#include "talent_define.h"
#include "skill_define.h"
#include "buff_define.h"
#include "QuestDef.h"
#include "suit_define.h"
#include "SocialDef.h"
#include "pet_define.h"
#include "guild_define.h"
#pragma pack(push, 1)

#define DAY_HANG_GETEXP_TIME_MS (6*60*60*1000) // ms
#define COOLDOWN_REVIVE_CD (30) //s
#define GETEXP_TIME_TICK (10*TICK_PER_SECOND)
#define HUANG_DEC_VIGOUR_TICK (60*TICK_PER_SECOND)
#define HUANG_DEC_VIGOUR_VAL (1)
#define GETEXP_MIN_LEVEL (71)
enum
{
	E_BidAttPoint_PointInvalid			=	1,		// 投点不合法
	E_BidAttPoint_NoEnoughAttPoint		=	2,		// 没有足够的属性点

	E_ClearAttPoint_ItemNotValid		=	10,		// 使用的物品不合法

	E_JoinHang_State					=	11,		// 已经进入挂机状态
	E_Hang_Area_Limit					=   12,		// 挂机区域限制
	E_Hang_Equip_No_Exist				=	13,		// 挂机装备不存在
	E_Hang_Item_No_Exist				=	14,		// 挂机物品不存在
	E_Hang_Num_Limit					=   15,		// 挂机次数已满
	E_Hang_NoHang_State					=	16,		// 不在挂机状态
	E_Hang_State_Limit					=   17,		// 战斗状态不能挂机

	E_Gift_BagNoEnough					=   18,		// 背包空间不足
	E_Gift_NotGet						=   19,		// 奖励时间未到，不能获取

	E_Hang_Yuanbao_No_Enough			=	20,		// 挂机元宝不足	
	E_Hang_Level_No_Enough				=	21,		// 挂机等级不足

	E_Safe_Code_Error					= 22,		// 安全码错误


	E_HangGetExp_StateLimit				=	23,
	E_HangGetExp_OutOfTime				=	24,
	E_HangGetExp_OutOfLevel				=	25,
	E_HangGetExp_OutOfVigour			=	26,

};

enum ERoleInitType
{
	ERIT_Null = -1,

	ERIT_Att				=	0,			// 人物基本属性
	ERIT_Skill				=	1,			// 人物技能
	ERIT_Item				=	2,			// 所有物品
	ERIT_ClientConfig		=	3,			// 客户端配置
	ERIT_FrindAndEnemy		=	4,			// 和所有好友的同步率,以及有哪些仇敌，黑名单
	ERIT_CompleteQuest		=	5,			// 已经完成的任务
	ERIT_IncompleteQuest	=	6,			// 没有完成的任务
	ERIT_Money				=	7,			// 金钱
	ERIT_Reputation			=	8,			// 声望
	ERIT_Guild				=	9,			// 帮派
	ERIT_MasterPrentice		=	10,			// 师徒
	ERIT_paimai				=   11,			// 拍卖
	ERIT_bank				=   12,			// 钱庄
	ERIT_Other				=   13,			// 其他数据
	ERIT_Pet_Sns_info		=	14,			// 宠物sns
	ERIT_Achievement		=	15,			// 成就
	ERIT_End,
};

enum EClassErrorCode
{
    ECEC_Success            =   E_Success,

    ECEC_NotUpToLevel       =   1,          // 玩家等级不够
    ECEC_IsNotBaseClass     =   2,          // 只有少侠才能进行职业专精
    ECEC_LackOfNewclassItem =   3,          // 缺少职业专精凭证道具
    ECEC_LackOfReclassItem  =   4,          // 缺少更换专精职业im道具
	ECEC_IsNotBaseClassEx	=	5,			// 已就职了英雄职业
	ECEC_ClassNotMatch		=	6,			// 英雄职业与专精职业不匹配
	ECEC_ClassNotSet		=	7,			// 未就职专精职业，不可进行职业转换
	ECEC_NPCError			=	8,			// NPC无效

    ECEC_End,
};

// 元气值奖励
enum EVigourRewardCode
{
    EVRC_FirstLogin_not_enough  = 1, // 不足以获得再登陆奖励
    EVRC_FirstLogin_Reward      = 2, // 您在上一次的游戏体验中，共消耗了X点元气值，奖励已发放至邮箱，请查收。
	EVRC_Online_not_enough		= 3,
    EVRC_Online_Reward          = 4, // 元气值重置，您昨天消耗了X点元气值，您应得的奖励已发送至邮箱，请查收
};

//-----------------------------------------------------------------------------
// 状态改变
//-----------------------------------------------------------------------------
struct NET_SIS_set_state : public tag_net_message
{
	NET_SIS_set_state()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_set_state");
		dw_size = sizeof(NET_SIS_set_state);
	}
	DWORD		dw_role_id;
	EState		eState;
};

struct NET_SIS_unset_state : public tag_net_message
{
	NET_SIS_unset_state()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_unset_state");
		dw_size = sizeof(NET_SIS_unset_state);
	}
	DWORD		dw_role_id;
	EState		eState;
};
//-----------------------------------------------------------------------------
// 玩家状态改变
//-----------------------------------------------------------------------------
struct NET_SIS_set_role_state : public tag_net_message
{
	NET_SIS_set_role_state()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_set_role_state");
		dw_size = sizeof(NET_SIS_set_role_state);
	}
	DWORD		dw_role_id;						// 角色ID
	ERoleState	eState;							// 状态标志
};

struct NET_SIS_unset_role_state : public tag_net_message
{
	NET_SIS_unset_role_state()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_unset_role_state");
		dw_size = sizeof(NET_SIS_unset_role_state);
	}
	DWORD		dw_role_id;						// 角色ID
	ERoleState	eState;							// 状态标志
};

struct NET_SIS_set_role_state_extend : public tag_net_message
{
	NET_SIS_set_role_state_extend()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_set_role_state_extend");
		dw_size = sizeof(NET_SIS_set_role_state_extend);
	}
	ERoleStateEx	eState;							// 状态标志
};

struct NET_SIS_unset_role_state_extend : public tag_net_message
{
	NET_SIS_unset_role_state_extend()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_unset_role_state_extend");
		dw_size = sizeof(NET_SIS_unset_role_state_extend);
	}
	ERoleStateEx	eState;							// 状态标志
};

//-----------------------------------------------------------------------------
// 玩家显示设置改变
//-----------------------------------------------------------------------------
// 设置时装模式
struct NET_SIC_fashion : public tag_net_message
{
	NET_SIC_fashion()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_fashion");
		dw_size = sizeof(NET_SIC_fashion);
	}
	BOOL			bFashion;	// 是否使用使装模式
};

// 当前外观
struct NET_SIS_avatar_equip : public tag_net_message
{
	NET_SIS_avatar_equip()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_avatar_equip");
		dw_size = sizeof(NET_SIS_avatar_equip);
	}
	DWORD			dw_role_id;
	tagAvatarEquip	sAvatarEquip;
	BOOL			bFashion;	// 是否使用使装模式
};

// 设置部位显示属性
struct NET_SIC_role_set_display : public tag_net_message
{
	NET_SIC_role_set_display()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_role_set_display");
		dw_size = sizeof(NET_SIC_role_set_display);
	}
	tagDisplaySet	sDisplaySet;
};

struct NET_SIS_role_set_display : public tag_net_message
{
	NET_SIS_role_set_display()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_role_set_display");
		dw_size = sizeof(NET_SIS_role_set_display);
	}
	DWORD			dw_role_id;
	tagDisplaySet	sDisplaySet;
};


//-----------------------------------------------------------------------------
// 玩家个人设置改变
//-----------------------------------------------------------------------------
// 修改本地玩家的个人设置
struct NET_SIC_change_personal_setting : public tag_net_message
{
	NET_SIC_change_personal_setting()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_change_personal_setting");
		dw_size = sizeof(NET_SIC_change_personal_setting);
	}
	tagDWPlayerPersonalSet	PersonalSet;
};

struct NET_SIS_change_personal_setting : public tag_net_message
{
	NET_SIS_change_personal_setting()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_change_personal_setting");
		dw_size = sizeof(NET_SIS_change_personal_setting);
	}
	tagDWPlayerPersonalSet	PersonalSet;
};

//-----------------------------------------------------------------------------
// 获取本地玩家初始结构
//-----------------------------------------------------------------------------
struct NET_SIC_get_role_init_state : public tag_net_message
{
	NET_SIC_get_role_init_state()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_get_role_init_state");
		dw_size = sizeof(NET_SIC_get_role_init_state);
	}
	ERoleInitType eType;					// 客户端需要得到数据类型
};


//-----------------------------------------------------------------------------
// 返回人物初始属性
//-----------------------------------------------------------------------------
struct NET_SIS_get_role_init_state_att : public tag_net_message
{
	NET_SIS_get_role_init_state_att()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_role_init_state_att");
		dw_size = sizeof(NET_SIS_get_role_init_state_att);
	}
	tagAvatarAtt	Avatar;							// 外观
	tagAvatarEquip	AvatarEquip;					// 装备外观
	tagDisplaySet	DisplaySet;						// 外观显示设置
	INT				nAtt[ERA_End];					// 当前人物属性
	//INT				nAttPointAdd[X_ERA_ATTA_NUM];	// 玩家投放到各个一级属性中的值
	INT				nLevel;							// 等级
	INT				nCurLevelExp;					// 当前升级经验
	//INT				nCredit;						// 信用度
	//INT				nIdentity;						// 身份
	INT				nVIPPoint;						// 会员积分
	DWORD			dwState;						// 状态标志位
	DWORD			n64RoleState;					// 玩家独有状态标志位 -- 需广播给周围玩家
	DWORD			dwRoleStateEx;					// 玩家独有状态标志位 -- 只须自己知道
	ERolePKState	ePKState;						// PK状态
	INT				iPKValue;						// PK值
	//DWORD			dwRebornMapID;					// 复活地图ID
	//int				nRebornX;						// 复活点
	//int				nRebornY;						// 复活点
	//Vector3			vRebornPoint;					// 复活点
	DWORD			dwGuildID;						// 帮派id
	UINT16			u16ActTitleID[3];				// 当前激活称号ID
	INT				nBuffNum;						// 状态数量
	//BOOL			bHasLeftMsg;					// 有留言
	EClassType      eClassType;                     // 专精职业
	//EClassTypeEx    eClassTypeEx;                   // 英雄职业(未开放)
	//DWORD			dwMasterID;						// 师傅ID；
	//INT16			n16PetPocketNum;				// 宠物栏数量
	//INT				nTotalMasterMoral;				// 总师德值
	INT				nKillNum;						// 杀人数
	//ECamp			e_role_camp;					// 角色阵营
	//ECamp			e_temp_role_camp;				// 角色临时阵营
	//INT16			n16_exbag_step;					// 包裹扩充阶段
	//INT16			n16_exware_step;				// 仓库扩充阶段
	BYTE			byRoleHelp[ROLE_HELP_NUM];		// 角色帮助数据
	//INT				n_achievement_point;			// 成就点数
	INT				n_total_recharge;				// 充值累计
	//DWORD			dw_destory_equip_count;			// 摧毁装备次数
	INT32			n32CurExploits;					// 荣誉点
	//BOOL			bIsPurpureDec;
	INT32			nEquipRating;
	//INT32			nCoolDownReviveCD;			
	INT				nVIPLevel;
	DWORD			dwVIPDeadline;					//VIP截止日期 gx add 2013.9.3
	//INT16			n16PetXiulianSize;				// 宠物寄养栏数量
	INT				n_sign_level;					// 签到等级
	DWORD			dwSpouseID;						//配偶ID
	DWORD			nMeiLi;							//魅力值 gx add
	INT32			nInstanceData;					//副本是否打过了 gx add 2013.8.28
	DWORD			dwRedZuiFlag;					//红唇标记 gx add 2013.10.25
	TCHAR			sz_role_name[X_SHORT_NAME];		// 名字
	tagBuffMsgInfo	Buff[1];						// 状态列表
};


//-----------------------------------------------------------------------------
// 返回人物技能列表
//-----------------------------------------------------------------------------
struct NET_SIS_get_role_init_state_skill : public tag_net_message
{
	NET_SIS_get_role_init_state_skill()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_role_init_state_skill");
		dw_size = sizeof(NET_SIS_get_role_init_state_skill);
	}
	INT					n_num;							// 技能个数
	tagSkillMsgInfo		Skill[1];						// 技能列表
};

//-----------------------------------------------------------------------------
// 已经完成的任务 不定长
//-----------------------------------------------------------------------------
struct NET_SIS_get_role_init_state_complete_quest : public tag_net_message
{
	NET_SIS_get_role_init_state_complete_quest()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_role_init_state_complete_quest");
		dw_size = sizeof(NET_SIS_get_role_init_state_complete_quest);
	}
	INT					n_num;						// 任务个数
	tagCompleteQuestMsgInfo completeQuest[1];
};

//-----------------------------------------------------------------------------
// 当前任务
//-----------------------------------------------------------------------------
struct NET_SIS_get_role_init_state_incomplete_quest : public tag_net_message
{
	NET_SIS_get_role_init_state_incomplete_quest()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_role_init_state_incomplete_quest");
		dw_size = sizeof(NET_SIS_get_role_init_state_incomplete_quest);
	}
	INT					n_num;						// 任务个数
	tagIncompleteQuestMsgInfo incompleteQuest[1];
};


//-----------------------------------------------------------------------------
// 所有物品装备
//-----------------------------------------------------------------------------
struct NET_SIS_get_role_init_state_item : public tag_net_message
{
	NET_SIS_get_role_init_state_item()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_role_init_state_item");
		dw_size = sizeof(NET_SIS_get_role_init_state_item);
	}
	INT16	n16SzBag;					// 背包大小
	INT16	n16SzRoleWare;				// 仓库大小
	INT		n_num;						// 物品装备个数
	BYTE	byData[1];					// 技能列表
};


//-----------------------------------------------------------------------------
// 套装
//-----------------------------------------------------------------------------
struct NET_SIS_get_role_init_state_suit : public tag_net_message
{
	NET_SIS_get_role_init_state_suit()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_role_init_state_suit");
		dw_size = sizeof(NET_SIS_get_role_init_state_suit);
	}
	INT		nSuitNum;
	BYTE	byData[1];					// tagSuitInit
};


//-----------------------------------------------------------------------------
// 所有物品冷却时间
//-----------------------------------------------------------------------------
struct NET_SIS_get_role_init_state_itemcdtime : public tag_net_message
{
	NET_SIS_get_role_init_state_itemcdtime()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_role_init_state_itemcdtime");
		dw_size = sizeof(NET_SIS_get_role_init_state_itemcdtime);
	}
	INT		n_num;						// 冷却时间物品(TypeID)个数
	BYTE	byData[1];					// tagCDTime
};

//-----------------------------------------------------------------------------
// 所有金钱
//-----------------------------------------------------------------------------
struct NET_SIS_get_role_init_state_money : public tag_net_message
{
	NET_SIS_get_role_init_state_money()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_role_init_state_money");
		dw_size = sizeof(NET_SIS_get_role_init_state_money);
	}
	INT32	nBagYuanBao;
	INT64	n64BagSilver;
	INT64	n64BagBindSilver;
	INT64	n64WareSilver;
	INT32	nBaiBaoYuanBao;
	INT32	nExchangeVolume;
	//INT32	nCurClanCon[ECLT_NUM];
	INT32   n32Exploit;
};

//-----------------------------------------------------------------------------
// 所有声望
//-----------------------------------------------------------------------------
struct NET_SIS_get_role_init_state_reputation : public tag_net_message
{
	NET_SIS_get_role_init_state_reputation()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_role_init_state_reputation");
		dw_size = sizeof(NET_SIS_get_role_init_state_reputation);
	}
	INT		nReputation[ECLT_NUM];
	BYTE    nActiveCount[ECLT_NUM];
	BYTE    bisFame[ECLT_NUM];
};

//-----------------------------------------------------------------------------
// 所在帮派信息及个人信息
//-----------------------------------------------------------------------------
struct NET_SIS_get_role_init_state_guild : public tag_net_message
{
	NET_SIS_get_role_init_state_guild()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_role_init_state_guild");
		dw_size = sizeof(NET_SIS_get_role_init_state_guild);
	}
	tagGuildBase	sGuildBase;			// 帮派基本属性
	tagGuildMember	sGuildMember;		// 个人信息
};

//------------------------------------------------------------------------------
// 获取远程玩家当前属性
//------------------------------------------------------------------------------
struct NET_SIC_get_remote_role_state : public tag_net_message
{
	NET_SIC_get_remote_role_state()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_get_remote_role_state");
		dw_size = sizeof(NET_SIC_get_remote_role_state);
	}
	INT		nRoleNum;
	DWORD	dw_role_id[1];	// 可能是远程人物，也可能是远程怪物，一次发送最多50个
};

//-------------------------------------------------------------------------------------------
// 客户端远程玩家同步数据消息结构
//-------------------------------------------------------------------------------------------
struct tagRemoteRoleData
{
	DWORD				dwID;						// 玩家ID
	INT					nLevel;						// 等级
	FLOAT				fPos[3];					// 位置
	FLOAT				fFaceTo[3];					// 朝向
	DWORD				dwState;					// 状态标志位
	INT64				n64RoleState;				// 角色独有状态标志位
	ERolePKState		ePKState;					// PK状态
	INT					iPKValue;					// PK值
	//BOOL				bIsPurpureDec;
	//BOOL				bIsGrayName;				// 是否灰名
	DWORD				dwGuildID;					// 帮派id(INVALID_VALUE表示没有加入帮派)
	DWORD				dwTeamID;					// 队伍id(INVALID_VALUE表示没有加入队伍)
	//INT8				n8GuildPos;					// 帮派职位
	UINT16				u16CurActTitleID[3];		// 激活称号(INVALID_VALUE表示没有激活称号)
	//BYTE				byStallLevel;				// 摊位模型等级
	//DWORD				dwMountPetID;				// 骑乘宠物id
	//DWORD				dwMountPetTypeID;			// 骑乘宠物typeid
	tagDisplaySet		sDisplaySet;				// 装备外观显示设置
	tagAvatarAtt		Avatar;						// 外观
	tagAvatarEquip		AvatarEquip;				// 装备外观
	INT					nAtt[ERRA_End];				// 远程玩家基本属性
	//tagRemoteOpenSet	sRemoteOpenSet;				// 对远端玩家公开信息设置
    EClassType          eClassType;                 // 专精职业
    //EClassTypeEx        eClassTypeEx;               // 英雄职业
	//tagDWORDTime		dwChangeSymbolTime;			// 帮会标志改变时间
	//DWORD				dwSymbolValue;				// 帮会标志
	//TCHAR				szText[2];					// 帮会文字

	DWORD				dwMountRideTypeID;			//骑乘typeid
	BYTE				bySolidateLevel;			//强化等级

	//DWORD				dwMasterID;					//师傅ID
	//DWORD				dwCarryID;					

	//ECamp				e_role_camp;				// 角色阵营
	//ECamp				e_temp_role_camp;			// 角色临时阵营

	//INT32				n32CurExploits;				// 战功
	BYTE				byLeader;					// 是否队长
	DWORD				dwTargetID;					// 目标ID
	DWORD				dwEquipRating;				// 装备评分
	//INT					n_god_level;				// 神级
	INT					nBuffNum;					// 状态数量
	DWORD				dwCompracticePartner;		// 双修对象 gx add 2013.6.28
	INT					nVIPLevel;					//VIP等级 gx add 2013.8.15
	DWORD				dwRedZuiFlag;				//红唇标记
	tagBuffMsgInfo		Buff[1];					// 状态列表
};

struct NET_SIS_get_remote_role_state : public tag_net_message
{
	NET_SIS_get_remote_role_state()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_remote_role_state");
		dw_size = sizeof(NET_SIS_get_remote_role_state);
	}
	tagRemoteRoleData		RoleData;		// 远程玩家结构，可能到后期也会变成不定长结构
};

//---------------------------------------------------------------------
// 远程生物属性结构
//---------------------------------------------------------------------
struct tagRemoteCreatureData
{
	DWORD			dwID;						// 生物ID
	DWORD			dw_data_id;					// 属性ID
	INT				nLevel;						// 等级
	DWORD			dwState;					// 状态标志位
	FLOAT			fPos[3];					// 位置
	FLOAT			fFaceTo[3];					// 朝向
	INT				nAtt[ERRA_End];				// 远程玩家基本属性
	//DWORD			dwMapObjID;					// 地图对象ID
	//BOOL			bOpen;						// 门初始状态
	DWORD			dwGuildID;					// 所属帮会ID
	DWORD			dwTaggedOwner;				//
	//BOOL			bCanBeAttack;				// 是否可被攻击
	ECreatureType	eCreType;					// 类型
	DWORD			dwTargetID;					// 目标id
	INT				nBuffNum;					// 状态数量
	//TCHAR			szPlantRole[X_SHORT_NAME];	// 种植者名字
	//DWORD			dwPlantYield;				// 种植当前产量
	//DWORD			dwPlantMaxYield;			// 种植最大产量
	//DWORD			dwPlantTime;				// 种植时间
	BOOL			bDynamic;					// 是否动态出现	
	tagBuffMsgInfo	Buff[1];					// 状态列表
};

struct NET_SIS_get_remote_creature_state : public tag_net_message
{
	NET_SIS_get_remote_creature_state()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_remote_creature_state");
		dw_size = sizeof(NET_SIS_get_remote_creature_state);
	}
	tagRemoteCreatureData	CreatureData;		// 远程生物结构
};


//---------------------------------------------------------------------
// 远程宠物属性结构
//---------------------------------------------------------------------
struct tagRemotePetData
{
    DWORD           dw_role_id;                   // 宠物所属的角色id，为-1时代表有问题
	DWORD			dwID;						// 生物ID
	DWORD			dwProtoID;					// 原型ID
	UPetState		uState;						// 形态
	INT				nShape;						// 体型
	INT				nColor;						// 颜色
	INT				nLevel;						// 等级
	INT				nQuality;					// 品质
};

struct NET_SIS_get_remote_pet_state : public tag_net_message
{
	NET_SIS_get_remote_pet_state()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_remote_pet_state");
		dw_size = sizeof(NET_SIS_get_remote_pet_state);
	}
	tagRemotePetData	PetData;
};

//---------------------------------------------------------------------
// 远程错误信息
//---------------------------------------------------------------------
struct NET_SIS_get_remote_state_error : public tag_net_message
{
	NET_SIS_get_remote_state_error()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_remote_state_error");
		dw_size = sizeof(*this);
	}
	INT n_num;
	DWORD dw_role_id[1];
};

//------------------------------------------------------------------------------
// 本地玩家属性改变
//------------------------------------------------------------------------------
struct NET_SIS_single_role_att_change : public tag_net_message
{
	NET_SIS_single_role_att_change()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_single_role_att_change");
		dw_size = sizeof(NET_SIS_single_role_att_change);
	}
	ERoleAttribute	eType;
	INT				nValue;
};


struct tagRoleAttValue
{
	ERoleAttribute	eType;
	INT				nValue;
};

struct NET_SIS_mutiple_role_att_change : public tag_net_message
{
	NET_SIS_mutiple_role_att_change()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_mutiple_role_att_change");
		dw_size = sizeof(NET_SIS_mutiple_role_att_change);
	}
	INT				n_num;
	tagRoleAttValue	value[1];
};

//-------------------------------------------------------------------------------
// 远程玩家以及远程生物属性改变
//------------------------------------------------------------------------------
struct NET_SIS_single_remote_att_change : public tag_net_message
{
	NET_SIS_single_remote_att_change()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_single_remote_att_change");
		dw_size = sizeof(NET_SIS_single_remote_att_change);
	}
	DWORD			dw_role_id;
	ERemoteRoleAtt	eType;
	INT				nValue;
};


struct tagRemoteAttValue
{
	ERemoteRoleAtt	eType;
	INT				nValue;
};

struct NET_SIS_mutiple_remote_att_change : public tag_net_message
{
	NET_SIS_mutiple_remote_att_change()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_mutiple_remote_att_change");
		dw_size = sizeof(NET_SIS_mutiple_remote_att_change);
	}
	DWORD				dw_role_id;
	INT					n_num;
	tagRemoteAttValue	value[1];
};


//--------------------------------------------------------------------------------
// 玩家经验改变
//--------------------------------------------------------------------------------
struct NET_SIS_change_role_exp : public tag_net_message
{
	NET_SIS_change_role_exp()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_change_role_exp");
		dw_size = sizeof(NET_SIS_change_role_exp);
	}
	INT		nExp;				// 当前
	INT		nChange;			// 变化多少
	BOOL	bKill;				// 是否通过击杀怪物获得
	INT     nSpecial;			//经验获得途径标识，1代表宝箱获得，后续还可能增加 gx add 2013.11.22
};

struct NET_SIS_role_exp_share_num : public tag_net_message
{
	NET_SIS_role_exp_share_num()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_role_exp_share_num");
		dw_size = sizeof(NET_SIS_role_exp_share_num);
	}
	INT		nShareNum;			// 组队经验共享人数
};

//--------------------------------------------------------------------------------
// 玩家声望
//--------------------------------------------------------------------------------
struct NET_SIS_change_role_repute : public tag_net_message
{
	NET_SIS_change_role_repute()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_change_role_repute");
		dw_size = sizeof(NET_SIS_change_role_repute);
	}
	BYTE	byClanType;			// 氏族
	INT		nRepute;			// 当前
	INT		nChange;			// 变化多少
};

//-----------------------------------------------------------------------------
// 名人状态改变
//-----------------------------------------------------------------------------
struct NET_SIS_becomeframe : public tag_net_message
{
	NET_SIS_becomeframe()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_becomeframe");
		dw_size = sizeof(NET_SIS_becomeframe);
	}
	 BYTE    eClanType;
};

//-----------------------------------------------------------------------------
// 远程玩家帮派信息变化
//-----------------------------------------------------------------------------
struct NET_SIS_remote_role_guild_info_change : public tag_net_message
{
	NET_SIS_remote_role_guild_info_change()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_remote_role_guild_info_change");
		dw_size = sizeof(NET_SIS_remote_role_guild_info_change);
	}
	DWORD	dw_role_id;
	DWORD	dwGuildID;					// 帮派id(INVALID_VALUE表示没有加入帮派)
	INT8	n8GuildPos;					// 帮派职位
};


//-----------------------------------------------------------------------------
// 氏族珍宝激活次数改变
//-----------------------------------------------------------------------------
struct NET_SIS_change_treasure_act_count : public tag_net_message
{
	NET_SIS_change_treasure_act_count()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_change_treasure_act_count");
		dw_size = sizeof(NET_SIS_change_treasure_act_count);
	}
	BYTE    eClanType;
	BYTE    nActCount;
};

//-----------------------------------------------------------------------------
// 氏族贡献达到上限
//-----------------------------------------------------------------------------
struct NET_SIS_gens_contribute_upper_limit : public tag_net_message
{
	NET_SIS_gens_contribute_upper_limit()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_gens_contribute_upper_limit");
		dw_size = sizeof(NET_SIS_gens_contribute_upper_limit);
	}
	BYTE    eClanType;
};

//--------------------------------------------------------------------------------
// 玩家等级改变
//--------------------------------------------------------------------------------
struct NET_SIS_change_role_level : public tag_net_message
{
	NET_SIS_change_role_level()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_change_role_level");
		dw_size = sizeof(NET_SIS_change_role_level);
	}
	DWORD	dw_role_id;
	INT		nLevel;
	BOOL	bKill;				// 是否因为击杀怪物产生变化
};


//--------------------------------------------------------------------------------
// 玩家属性投点
//--------------------------------------------------------------------------------
struct NET_SIC_role_att_point : public tag_net_message
{
	NET_SIC_role_att_point()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_role_att_point");
		dw_size = sizeof(NET_SIC_role_att_point);
	}
	INT	nAttPointAdd[X_ERA_ATTA_NUM];
};

struct NET_SIS_role_att_point : public tag_net_message
{
	NET_SIS_role_att_point()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_role_att_point");
		dw_size = sizeof(NET_SIS_role_att_point);
	}
	DWORD dw_error_code;	// 错误码
};

//---------------------------------------------------------------------------------
// 玩家属性洗点
//---------------------------------------------------------------------------------
struct NET_SIC_clear_att_point : public tag_net_message
{
	NET_SIC_clear_att_point()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_clear_att_point");
		dw_size = sizeof(NET_SIC_clear_att_point);
	}
	INT64 n64ItemID;				// 洗点道具
};

struct NET_SIS_clear_att_point : public tag_net_message
{
	NET_SIS_clear_att_point()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_clear_att_point");
		dw_size = sizeof(NET_SIS_clear_att_point);
	}
	DWORD dw_error_code;				// 错误码
};

//---------------------------------------------------------------------------------
// 玩家各个一级属性投放值改变
//---------------------------------------------------------------------------------
struct NET_SIS_add_change_role_att_point : public tag_net_message
{
	NET_SIS_add_change_role_att_point()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_add_change_role_att_point");
		dw_size = sizeof(NET_SIS_add_change_role_att_point);
	}
	INT	nAttPointAdd[X_ERA_ATTA_NUM];
};


//---------------------------------------------------------------------------------
// 玩家好友
//---------------------------------------------------------------------------------
struct NET_SIS_send_friend_list : public tag_net_message
{
	NET_SIS_send_friend_list()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_send_friend_list");
		dw_size = sizeof(NET_SIS_send_friend_list);
	}
	INT				n_num;		  // 好友数量
	tagFriendInfo	FriendInfo[1];
};

//---------------------------------------------------------------------------------
// 玩家黑名单
//---------------------------------------------------------------------------------
struct NET_SIS_send_black_list : public tag_net_message
{
	NET_SIS_send_black_list()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_send_black_list");
		dw_size = sizeof(NET_SIS_send_black_list);
	}
	INT				n_num;
	tagBlackInfo	BlackInfo[1];
};

//---------------------------------------------------------------------------------
// 玩家仇人
//---------------------------------------------------------------------------------
struct NET_SIS_send_enemy_list : public tag_net_message
{
	NET_SIS_send_enemy_list()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_send_enemy_list");
		dw_size = sizeof(NET_SIS_send_enemy_list);
	}
	INT				n_num;
	tagEnemyInfo	EnemyInfo[1];
};

//---------------------------------------------------------------------------------
// 开/关门
//---------------------------------------------------------------------------------
struct NET_SIS_open_door : public tag_net_message
{
	NET_SIS_open_door()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_open_door");
		dw_size = sizeof(NET_SIS_open_door);
	}
	DWORD			dw_role_id;
};

struct NET_SIS_close_door : public tag_net_message
{
	NET_SIS_close_door()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_close_door");
		dw_size = sizeof(NET_SIS_close_door);
	}
	DWORD			dw_role_id;
};

//---------------------------------------------------------------------------------
// 怪物所属改变
//---------------------------------------------------------------------------------
struct NET_SIS_change_creuture_adscription : public tag_net_message
{
	NET_SIS_change_creuture_adscription()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_change_creuture_adscription");
		dw_size = sizeof(NET_SIS_change_creuture_adscription);
	}
	DWORD			dwCreatureID;
	DWORD			dwTaggedOwner;
};

//---------------------------------------------------------------------------------
// NPC对话
//---------------------------------------------------------------------------------
struct NET_SIC_npc_talk : public tag_net_message
{
	NET_SIC_npc_talk()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_npc_talk");
		dw_size = sizeof(NET_SIC_npc_talk);
	}
	DWORD			dwNPCId;
};


//----------------------------------------------------------------------------------
// 向服务器请求对方的装备
//----------------------------------------------------------------------------------
struct NET_SIC_get_remote_role_equip_info : public tag_net_message
{
	NET_SIC_get_remote_role_equip_info()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_get_remote_role_equip_info");
		dw_size = sizeof(NET_SIC_get_remote_role_equip_info);
	}
	DWORD			dw_role_id;
};
//gx modify 2013.6.5
//新增远程玩家基本属性描述
struct NET_SIS_get_remote_role_equip_info : public tag_net_message
{
	NET_SIS_get_remote_role_equip_info()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_remote_role_equip_info");
		dw_size = sizeof(NET_SIS_get_remote_role_equip_info);
	}
	DWORD			dw_role_id;
	INT				nEquipNum;					//装备个数
	//add
	INT				nLevel;						//玩家等级
	INT				nAtt[ERRA_End];				//远程玩家基本属性
	DWORD			dwGuildID;					//行会ID
	DWORD			dwSpouseID;					//配偶
	BYTE			byClass;					//职业
	BYTE			bySex;						//性别
	//gx add 2013.8.19
	INT32			nFightLi;					//战斗力
	DWORD			dwMeili;					//魅力值
	INT32			nRongyu;					//荣誉点
	INT				nPKvalue;					//pk值
	//end
	tagAvatarEquip	AvatarEquip;				//装备外观
	//end
	BYTE			byEquip[1];					//装备
};

//gx add 2013.6.6
//若请求的远程玩家不在线，则发送该消息
struct NET_SIS_get_remote_role_equip_info_offline : public tag_net_message
{
	NET_SIS_get_remote_role_equip_info_offline()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_remote_role_equip_info_offline");
		dw_size = sizeof(NET_SIS_get_remote_role_equip_info_offline);
	}
};

//-----------------------------------------------------------------------------
// 开始挂机
//-----------------------------------------------------------------------------
struct NET_SIC_start_hang : public tag_net_message
{
	NET_SIC_start_hang()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_start_hang");
		dw_size = sizeof(NET_SIC_start_hang);
	}
	DWORD	dw_safe_code;
};

struct NET_SIS_start_hang : public tag_net_message
{
	NET_SIS_start_hang()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_start_hang");
		dw_size = sizeof(NET_SIS_start_hang);
	}
	DWORD dwError;
};

//-----------------------------------------------------------------------------
// 取消挂机
//-----------------------------------------------------------------------------
struct NET_SIC_cancel_hang : public tag_net_message
{
	NET_SIC_cancel_hang()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_cancel_hang");
		dw_size = sizeof(NET_SIC_cancel_hang);
	}
};

struct NET_SIS_cancel_hang : public tag_net_message
{
	NET_SIS_cancel_hang()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_cancel_hang");
		dw_size = sizeof(NET_SIS_cancel_hang);
	}
	DWORD dwError;
};

//-----------------------------------------------------------------------------
// 离线关机设置
//-----------------------------------------------------------------------------
struct NET_SIC_set_leave_line_hang : public tag_net_message
{
	NET_SIC_set_leave_line_hang()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_set_leave_line_hang");
		dw_size = sizeof(NET_SIC_set_leave_line_hang);
	}
	BOOL		bExp;				// 是否使用经验丹
	BOOL		bBrotherhood;		// 是否使用义气丹
};

//-----------------------------------------------------------------------------
// 获取离线经验
//-----------------------------------------------------------------------------
struct NET_SIC_get_leave_exp : public tag_net_message
{
	NET_SIC_get_leave_exp()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_get_leave_exp");
		dw_size = sizeof(NET_SIC_get_leave_exp);
	}
};

struct NET_SIS_get_leave_exp : public tag_net_message
{
	NET_SIS_get_leave_exp()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_leave_exp");
		dw_size = sizeof(NET_SIS_get_leave_exp);
	}
	INT			nExp;
	//INT			nBrotherHand;
	//INT16		n16HangNum;
};


//-----------------------------------------------------------------------------
// 提取离线经验
//-----------------------------------------------------------------------------
struct NET_SIC_pickup_leave_exp : public tag_net_message
{
	NET_SIC_pickup_leave_exp()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_pickup_leave_exp");
		dw_size = sizeof(NET_SIC_pickup_leave_exp);
	}
	INT16		n16Type;
	INT16		nLeaveTime;//gx add
	//DWORD	dw_safe_code;
};

struct NET_SIS_pickup_leave_exp : public tag_net_message
{
	NET_SIS_pickup_leave_exp()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_pickup_leave_exp");
		dw_size = sizeof(NET_SIS_pickup_leave_exp);
	}
	INT			nExp;
	DWORD		dwError;
};

//-----------------------------------------------------------------------------
// 离线经验上线提示
//-----------------------------------------------------------------------------
struct NET_SIS_leave_exp_clueon : public tag_net_message
{
	NET_SIS_leave_exp_clueon()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_leave_exp_clueon");
		dw_size = sizeof(NET_SIS_leave_exp_clueon);
	}
	INT			nExp;				// 离线经验
	//INT			nBrother;			// 离线义气
	//INT			nExpItem;			// 消耗经验丹个数
	//INT			nBrotherItem;		// 消耗义气丹个数
	INT		dw_logout_time;		// 离线时间
};

//-----------------------------------------------------------------------------
// 更新挂机次数挂机
//-----------------------------------------------------------------------------
struct NET_SIS_change_hang_num : public tag_net_message
{
	NET_SIS_change_hang_num()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_change_hang_num");
		dw_size = sizeof(NET_SIS_change_hang_num);
	}
	INT16 n16HangNum;
};

//-----------------------------------------------------------------------------
// 宠物栏数量变化
//-----------------------------------------------------------------------------
struct NET_SIC_pet_pocket_size_change : public tag_net_message
{
	NET_SIC_pet_pocket_size_change()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_pet_pocket_size_change");
		dw_size = sizeof(NET_SIC_pet_pocket_size_change);
	}
};

struct NET_SIS_pet_pocket_size_change : public tag_net_message
{
	NET_SIS_pet_pocket_size_change()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_pet_pocket_size_change");
		dw_size = sizeof(NET_SIS_pet_pocket_size_change);
	}
	DWORD dwErrorCode;
	INT16 n16NewSize;
};

//-----------------------------------------------------------------------------
// 帮助数据
//-----------------------------------------------------------------------------
struct NET_SIS_role_help : public tag_net_message
{
	NET_SIS_role_help()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_role_help");
		dw_size = sizeof(NET_SIS_role_help);
	}
	BYTE byRoleHelp[ROLE_HELP_NUM];
};

//-----------------------------------------------------------------------------
// 每天清零数据
//-----------------------------------------------------------------------------
struct NET_SIS_role_day_claer : public tag_net_message
{
	NET_SIS_role_day_claer()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_role_day_claer");
		dw_size = sizeof(NET_SIS_role_day_claer);
	}
	BYTE byDayClear[ROLE_DAY_CLEAR_NUM];
};

//-----------------------------------------------------------------------------
// 修改帮助数据
//-----------------------------------------------------------------------------
struct NET_SIC_modify_role_help : public tag_net_message
{
	NET_SIC_modify_role_help()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_modify_role_help");
		dw_size = sizeof(NET_SIC_modify_role_help);
	}
	BYTE	byIndex;
};


//-----------------------------------------------------------------------------
// 人物对话数据
//-----------------------------------------------------------------------------
struct NET_SIS_role_talk : public tag_net_message
{
	NET_SIS_role_talk()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_role_talk");
		dw_size = sizeof(NET_SIS_role_talk);
	}
	BYTE	byRoleTalk[TALK_DATA_NUM];
};

//-----------------------------------------------------------------------------
// 修改人物对话数据
//-----------------------------------------------------------------------------
struct NET_SIC_modify_role_talk : public tag_net_message
{
	NET_SIC_modify_role_talk()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_modify_role_talk");
		dw_size = sizeof(NET_SIC_modify_role_talk);
	}
	BYTE	byIndex;
	BYTE	byState;
};

//-----------------------------------------------------------------------------
// 人物快捷键数据
//-----------------------------------------------------------------------------
struct NET_SIC_key_info : public tag_net_message
{
	NET_SIC_key_info()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_key_info");
		dw_size = sizeof(NET_SIC_key_info);
	}
};

struct NET_SIS_key_info : public tag_net_message
{
	NET_SIS_key_info()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_key_info");
		dw_size = sizeof(NET_SIS_key_info);
	}
	roleOnlineState stKeyInfo;
};

//-----------------------------------------------------------------------------
// 修改人物快捷键数据
//-----------------------------------------------------------------------------
struct NET_SIC_modify_key_info : public tag_net_message
{
	NET_SIC_modify_key_info()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_modify_key_info");
		dw_size = sizeof(NET_SIC_modify_key_info);
	}
	roleOnlineState stKeyInfo;
};


//-----------------------------------------------------------------------------
// 开始新手奖励计时
//-----------------------------------------------------------------------------
struct NET_SIC_begin_role_gift_time : public tag_net_message
{
	NET_SIC_begin_role_gift_time()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_begin_role_gift_time");
		dw_size = sizeof(NET_SIC_begin_role_gift_time);
	}
};

//-----------------------------------------------------------------------------
// 发送新手奖励数据
//-----------------------------------------------------------------------------
struct NET_SIS_new_role_gift : public tag_net_message
{
	NET_SIS_new_role_gift()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_new_role_gift");
		dw_size = sizeof(NET_SIS_new_role_gift);
	}
	DWORD		dwGiftID;				// 奖励物品ID
	DWORD		dwNumber;				// 奖励物品数量
	DWORD		dwLeavingTime;			// 剩余时间
	BOOL		bCal;					// 是否启动
};

//-----------------------------------------------------------------------------
// 启动新手奖励
//-----------------------------------------------------------------------------
struct NET_SIC_start_new_role_gift : public tag_net_message
{
	NET_SIC_start_new_role_gift()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_start_new_role_gift");
		dw_size = sizeof(NET_SIC_start_new_role_gift);
	}
};

//-----------------------------------------------------------------------------
// 获取新手奖励
//-----------------------------------------------------------------------------
struct NET_SIC_get_new_role_gift : public tag_net_message
{
	NET_SIC_get_new_role_gift()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_get_new_role_gift");
		dw_size = sizeof(NET_SIC_get_new_role_gift);
	}
};

struct NET_SIS_get_new_role_gift : public tag_net_message
{
	NET_SIS_get_new_role_gift()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_new_role_gift");
		dw_size = sizeof(NET_SIS_get_new_role_gift);
	}
	DWORD	 dwError;
};

//-----------------------------------------------------------------------------
// 延迟
//-----------------------------------------------------------------------------
struct NET_SIC_get_delay : public tag_net_message
{
	NET_SIC_get_delay()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_get_delay");
		dw_size = sizeof(NET_SIC_get_delay);
	}
};

struct NET_SIS_get_delay : public tag_net_message
{
	NET_SIS_get_delay()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_delay");
		dw_size = sizeof(NET_SIS_get_delay);
	}
};

//-----------------------------------------------------------------------------
// 人物阵营改变
//-----------------------------------------------------------------------------
struct NET_SIS_change_role_camp : public tag_net_message
{
	NET_SIS_change_role_camp()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_change_role_camp");
		dw_size = sizeof(NET_SIS_change_role_camp);
	}
	ECamp		e_role_camp;
	ECamp		e_temp_role_camp;
};

struct NET_SIS_vigour_reward : public tag_net_message
{
	NET_SIS_vigour_reward()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_vigour_reward");
		dw_size = sizeof(NET_SIS_vigour_reward);
	}
	DWORD dwVigourCost;
	EVigourRewardCode e_code;
};

//目标改变
struct NET_SIC_target_change : public tag_net_message
{
	NET_SIC_target_change()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_target_change");
		dw_size = sizeof(NET_SIC_target_change);
	}
	DWORD dw_target_id;
};

struct NET_SIS_target_change : public tag_net_message
{
	NET_SIS_target_change()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_target_change");
		dw_size = sizeof(NET_SIS_target_change);
	}

	DWORD dw_unit_id;
	DWORD dw_target_id;
};


struct NET_SIS_delay_send : public tag_net_message
{
	NET_SIS_delay_send()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_delay_send");
		dw_size = sizeof(*this);
	}
	BYTE	by_delay;
};

// 通知需要改变超级密码
struct NET_SIS_change_code : public tag_net_message
{
	NET_SIS_change_code()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_change_code");
		dw_size = sizeof(*this);
	}
};

// 超级密码是否验证通过
struct NET_SIS_code_check_ok : public tag_net_message
{
	NET_SIS_code_check_ok()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_code_check_ok");
		dw_size = sizeof(*this);
	}

	BOOL	bSuccess;	// 是否通过
};

// 单独验证超级密码
struct NET_SIC_code_check_ok : public tag_net_message
{
	NET_SIC_code_check_ok()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_code_check_ok");
		dw_size = sizeof(*this);
	}
	DWORD		dw_safe_code;
};


// 区域挂机得经验
struct NET_SIC_start_hang_get_exp : public tag_net_message
{
	NET_SIC_start_hang_get_exp()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_start_hang_get_exp");
		dw_size = sizeof(*this);
	}
	INT type; // 1,kongfu;2,Comprehend;Dancing;
};

struct NET_SIS_start_hang_get_exp : public tag_net_message
{
	NET_SIS_start_hang_get_exp()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_start_hang_get_exp");
		dw_size = sizeof(*this);
	}
	DWORD dwError;
};

struct NET_SIS_start_hang_time_left : public tag_net_message
{
	NET_SIS_start_hang_time_left()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_start_hang_time_left");
		dw_size = sizeof(*this);
	}
	DWORD dwLeftMilliseconds;
};

// 退出区域挂机得经验
struct NET_SIC_stop_hang_get_exp : public tag_net_message
{
	NET_SIC_stop_hang_get_exp()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_stop_hang_get_exp");
		dw_size = sizeof(*this);
	}
};

// 用于控制显示界面
struct NET_SIS_show_consume_reward_frame : public tag_net_message
{
	NET_SIS_show_consume_reward_frame()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_show_consume_reward_frame");
		dw_size = sizeof(*this);
	}
	INT reserved;
};

// 用于控制显示界面
struct NET_SIC_get_consume_reward : public tag_net_message
{
	NET_SIC_get_consume_reward()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIC_get_consume_reward");
		dw_size = sizeof(*this);
	}
	INT index;
};
// 玩家获得VIP属性
struct NET_SIS_get_vip_level:public tag_net_message
{
	NET_SIS_get_vip_level()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_get_vip_level");
		dw_size = sizeof(*this);
	}
	DWORD	dw_role_id;
	BYTE	vip_level;
	DWORD	dw_VIPDeadLine;
};
// 玩家失去VIP属性
struct NET_SIS_unset_vip_level:public tag_net_message
{
	NET_SIS_unset_vip_level()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_unset_vip_level");
		dw_size = sizeof(*this);
	}
	DWORD	dw_role_id;
};
// 玩家副本通关数据发生变化 gx add 2013.8.28
struct NET_SIS_set_instance_data:public tag_net_message
{
	NET_SIS_set_instance_data()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_set_instance_data");
		dw_size = sizeof(*this);
	}
	DWORD	dw_role_id;
	INT32	nInstanceData;//镇妖塔通关数据信息
};
//更新签到等级 gx add 2013.10.28
struct NET_SIS_update_sign_level:public tag_net_message
{
	NET_SIS_update_sign_level()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_update_sign_level");
		dw_size = sizeof(*this);
	}
	INT nSignLevel;//签到等级
};
//更新脚本数据，具体含义客户端负责解释 gx add 2013.10.29
struct NET_SIS_update_role_script_data:public tag_net_message
{
	NET_SIS_update_role_script_data()
	{
		ZeroMemory(this, sizeof(*this));
		dw_message_id = message_id_crc("NET_SIS_update_role_script_data");
		dw_size = sizeof(*this);
	}
	DWORD dw_role_id;//角色ID，防止异常
	INT nindex;//脚本数据索引值
	DWORD dwvalue;//该索引值对应的脚本数据
};
#pragma pack(pop)
#endif
